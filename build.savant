/*
 * Copyright (c) 2016-2022, Inversoft Inc., All Rights Reserved
 */

guavaVersion = "30.1.0-jre"
guiceVersion = "5.0.1"
jacksonVersion = "2.13.0"
restifyVersion = "3.9.0"
testngVersion = "7.3.0"

project(group: "com.inversoft", name: "barista", version: "1.1.1", licenses: ["ApacheV2_0"]) {
  workflow {
    fetch {
      cache()
      url(url: "https://repository.savantbuild.org")
    }
    publish {
      cache()
    }
  }

  publishWorkflow {
    subversion(repository: "https://svn.savantbuild.org")
  }

  dependencies {
    group(name: "compile") {
      dependency(id: "com.inversoft:restify:${restifyVersion}")
      dependency(id: "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
      dependency(id: "com.google.guava:guava:${guavaVersion}", skipCompatibilityCheck: true)
      dependency(id: "com.google.inject:guice:${guiceVersion}")
    }
    group(name: "test-compile", export: false) {
      dependency(id: "org.testng:testng:${testngVersion}")
    }
  }

  publications {
    standard()
  }
}

/*
 * Define Plugins
 */
dependency = loadPlugin(id: "org.savantbuild.plugin:dependency:1.0.2")
file = loadPlugin(id: "org.savantbuild.plugin:file:1.0.2")
idea = loadPlugin(id: "org.savantbuild.plugin:idea:1.0.1")
java = loadPlugin(id: "org.savantbuild.plugin:java:1.0.2")
javaTestNG = loadPlugin(id: "org.savantbuild.plugin:java-testng:1.0.9")
release = loadPlugin(id: "org.savantbuild.plugin:release-git:1.0.0")

/*
 * Plugin Settings
 */
java.settings.javaVersion = "1.8"
javaTestNG.settings.javaVersion = "1.8"

/*
 * Targets
 */
target(name: "clean", description: "Cleans out the build directory") {
  java.clean()
  file.prune(dir: "target") // clean the mvn directory so we release properly
}

target(name: "test", description: "Executes the projects tests", dependsOn: ["jar"]) {
  javaTestNG.test()
}

target(name: "dependency-tree", description: "Print the entire dependency tree") {
  dependency.printFull()
}

target(name: "compile", description: "Compiles the project") {
  java.compile()
}

target(name: "jar", description: "JARs the project", dependsOn: ["compile"]) {
  java.jar()
}

target(name: "test", description: "Executes the projects tests", dependsOn: ["jar"]) {
}

target(name: "mvn-deploy", description: "Publish to MVN repo", dependsOn: ["clean", "compile"]) {
  if (new ProcessBuilder('mvn', 'deploy', '-Prelease').inheritIO().start().waitFor() != 0) {
    fail("deploy failed")
  }
}

target(name: "int", description: "Releases a local integration build of the project", dependsOn: ["test"]) {
  dependency.integrate()
}

target(name: "list-unused-dependencies", description: "Lists the unused dependencies of the project", dependsOn: ["compile"]) {
  dependency.listUnusedDependencies()
}

target(name: "release", description: "Releases a full version of the project", dependsOn: ["clean", "int"]) {
  release.release()
}

target(name: "idea", description: "Updates the IntelliJ IDEA module file") {
  idea.iml()
}

target(name: "mvn-deploy", description: "Publish to MVN repo", dependsOn: ["clean", "compile"]) {
  if (new ProcessBuilder('mvn', 'deploy', '-Prelease').inheritIO().start().waitFor() != 0) {
    fail("deploy failed")
  }
}
